
SOLIS_V4_AUXILIARE_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003c88  08003c88  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c88  08003c88  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000000c8  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b99c  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bf9  00000000  00000000  0002ba23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae0  00000000  00000000  0002d620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000862  00000000  00000000  0002e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ce55  00000000  00000000  0002e962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cb29  00000000  00000000  0004b7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b11ed  00000000  00000000  000582e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002d50  00000000  00000000  001094d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0010c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c24 	.word	0x08003c24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003c24 	.word	0x08003c24

080001c8 <Update_Aux_State>:
aux_state* Offline_Mode = &Offline;

extern CAN_HandleTypeDef hcan;

void Update_Aux_State()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

		static bool Toggle_State_Right = OFF;
		static bool Toggle_State_Left = OFF;

		//avarie
		if(auxiliary->avarie == ON && Toggle_State_Left == Toggle_State_Right )
 80001cc:	4b61      	ldr	r3, [pc, #388]	; (8000354 <Update_Aux_State+0x18c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	f003 0308 	and.w	r3, r3, #8
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d019      	beq.n	8000210 <Update_Aux_State+0x48>
 80001dc:	4b5e      	ldr	r3, [pc, #376]	; (8000358 <Update_Aux_State+0x190>)
 80001de:	781a      	ldrb	r2, [r3, #0]
 80001e0:	4b5e      	ldr	r3, [pc, #376]	; (800035c <Update_Aux_State+0x194>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d113      	bne.n	8000210 <Update_Aux_State+0x48>
			{
				Sign_Right_500ms_Timer = Sign_Left_500ms_Timer; //sincronizare semnalizari
 80001e8:	4b5d      	ldr	r3, [pc, #372]	; (8000360 <Update_Aux_State+0x198>)
 80001ea:	781a      	ldrb	r2, [r3, #0]
 80001ec:	4b5d      	ldr	r3, [pc, #372]	; (8000364 <Update_Aux_State+0x19c>)
 80001ee:	701a      	strb	r2, [r3, #0]
				auxiliary->sign_left = auxiliary->sign_right = ON;
 80001f0:	4b58      	ldr	r3, [pc, #352]	; (8000354 <Update_Aux_State+0x18c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	781a      	ldrb	r2, [r3, #0]
 80001f6:	f042 0204 	orr.w	r2, r2, #4
 80001fa:	701a      	strb	r2, [r3, #0]
 80001fc:	4a55      	ldr	r2, [pc, #340]	; (8000354 <Update_Aux_State+0x18c>)
 80001fe:	6812      	ldr	r2, [r2, #0]
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000206:	b2d9      	uxtb	r1, r3
 8000208:	7813      	ldrb	r3, [r2, #0]
 800020a:	f361 0341 	bfi	r3, r1, #1, #1
 800020e:	7013      	strb	r3, [r2, #0]
			}

		//semnalizare stanga
		if(auxiliary->sign_left == ON)
 8000210:	4b50      	ldr	r3, [pc, #320]	; (8000354 <Update_Aux_State+0x18c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	f003 0302 	and.w	r3, r3, #2
 800021a:	b2db      	uxtb	r3, r3
 800021c:	2b00      	cmp	r3, #0
 800021e:	d01b      	beq.n	8000258 <Update_Aux_State+0x90>
		{
			if(++Sign_Left_500ms_Timer == 10)
 8000220:	4b4f      	ldr	r3, [pc, #316]	; (8000360 <Update_Aux_State+0x198>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	b2da      	uxtb	r2, r3
 8000228:	4b4d      	ldr	r3, [pc, #308]	; (8000360 <Update_Aux_State+0x198>)
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	4b4c      	ldr	r3, [pc, #304]	; (8000360 <Update_Aux_State+0x198>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b0a      	cmp	r3, #10
 8000232:	d11c      	bne.n	800026e <Update_Aux_State+0xa6>
			{
				HAL_GPIO_TogglePin(GPIOB, SIGN_LEFT_Pin);
 8000234:	2101      	movs	r1, #1
 8000236:	484c      	ldr	r0, [pc, #304]	; (8000368 <Update_Aux_State+0x1a0>)
 8000238:	f001 fde4 	bl	8001e04 <HAL_GPIO_TogglePin>
				Toggle_State_Left = !Toggle_State_Left;
 800023c:	4b46      	ldr	r3, [pc, #280]	; (8000358 <Update_Aux_State+0x190>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	bf0c      	ite	eq
 8000244:	2301      	moveq	r3, #1
 8000246:	2300      	movne	r3, #0
 8000248:	b2db      	uxtb	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	4b42      	ldr	r3, [pc, #264]	; (8000358 <Update_Aux_State+0x190>)
 800024e:	701a      	strb	r2, [r3, #0]
				Sign_Left_500ms_Timer = 0;
 8000250:	4b43      	ldr	r3, [pc, #268]	; (8000360 <Update_Aux_State+0x198>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	e00a      	b.n	800026e <Update_Aux_State+0xa6>
			}
		}
		else
			{
				HAL_GPIO_WritePin(GPIOB, SIGN_LEFT_Pin, OFF);
 8000258:	2200      	movs	r2, #0
 800025a:	2101      	movs	r1, #1
 800025c:	4842      	ldr	r0, [pc, #264]	; (8000368 <Update_Aux_State+0x1a0>)
 800025e:	f001 fdb9 	bl	8001dd4 <HAL_GPIO_WritePin>
				Sign_Left_500ms_Timer = 0;
 8000262:	4b3f      	ldr	r3, [pc, #252]	; (8000360 <Update_Aux_State+0x198>)
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
				Toggle_State_Left = OFF;
 8000268:	4b3b      	ldr	r3, [pc, #236]	; (8000358 <Update_Aux_State+0x190>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
			}

		//semanlizare dreapta
		if(auxiliary->sign_right == ON)
 800026e:	4b39      	ldr	r3, [pc, #228]	; (8000354 <Update_Aux_State+0x18c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	f003 0304 	and.w	r3, r3, #4
 8000278:	b2db      	uxtb	r3, r3
 800027a:	2b00      	cmp	r3, #0
 800027c:	d01b      	beq.n	80002b6 <Update_Aux_State+0xee>
		{
			if(++Sign_Right_500ms_Timer == 10)
 800027e:	4b39      	ldr	r3, [pc, #228]	; (8000364 <Update_Aux_State+0x19c>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	3301      	adds	r3, #1
 8000284:	b2da      	uxtb	r2, r3
 8000286:	4b37      	ldr	r3, [pc, #220]	; (8000364 <Update_Aux_State+0x19c>)
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	4b36      	ldr	r3, [pc, #216]	; (8000364 <Update_Aux_State+0x19c>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b0a      	cmp	r3, #10
 8000290:	d122      	bne.n	80002d8 <Update_Aux_State+0x110>
			{
				HAL_GPIO_TogglePin(GPIOB, SIGN_RIGHT_Pin);
 8000292:	2102      	movs	r1, #2
 8000294:	4834      	ldr	r0, [pc, #208]	; (8000368 <Update_Aux_State+0x1a0>)
 8000296:	f001 fdb5 	bl	8001e04 <HAL_GPIO_TogglePin>
				Sign_Right_500ms_Timer = 0;
 800029a:	4b32      	ldr	r3, [pc, #200]	; (8000364 <Update_Aux_State+0x19c>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
				Toggle_State_Right = !Toggle_State_Right;
 80002a0:	4b2e      	ldr	r3, [pc, #184]	; (800035c <Update_Aux_State+0x194>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf0c      	ite	eq
 80002a8:	2301      	moveq	r3, #1
 80002aa:	2300      	movne	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	4b2a      	ldr	r3, [pc, #168]	; (800035c <Update_Aux_State+0x194>)
 80002b2:	701a      	strb	r2, [r3, #0]
 80002b4:	e010      	b.n	80002d8 <Update_Aux_State+0x110>
			}
		}
		else
			{
				HAL_GPIO_WritePin(GPIOB, SIGN_RIGHT_Pin, auxiliary->sign_right);
 80002b6:	4b27      	ldr	r3, [pc, #156]	; (8000354 <Update_Aux_State+0x18c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	461a      	mov	r2, r3
 80002c4:	2102      	movs	r1, #2
 80002c6:	4828      	ldr	r0, [pc, #160]	; (8000368 <Update_Aux_State+0x1a0>)
 80002c8:	f001 fd84 	bl	8001dd4 <HAL_GPIO_WritePin>
				Sign_Left_500ms_Timer = 0;
 80002cc:	4b24      	ldr	r3, [pc, #144]	; (8000360 <Update_Aux_State+0x198>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
				Toggle_State_Right = OFF;
 80002d2:	4b22      	ldr	r3, [pc, #136]	; (800035c <Update_Aux_State+0x194>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
			}



		HAL_GPIO_WritePin(GPIOB, HORN_Pin, auxiliary->horn);
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <Update_Aux_State+0x18c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	461a      	mov	r2, r3
 80002e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ea:	481f      	ldr	r0, [pc, #124]	; (8000368 <Update_Aux_State+0x1a0>)
 80002ec:	f001 fd72 	bl	8001dd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, CAMERA_Pin, auxiliary->camera);
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <Update_Aux_State+0x18c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	461a      	mov	r2, r3
 80002fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000302:	4819      	ldr	r0, [pc, #100]	; (8000368 <Update_Aux_State+0x1a0>)
 8000304:	f001 fd66 	bl	8001dd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, BACK_LIGHT_Pin | FRONT_LIGHT_Pin, auxiliary->faruri);
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <Update_Aux_State+0x18c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000312:	b2db      	uxtb	r3, r3
 8000314:	461a      	mov	r2, r3
 8000316:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800031a:	4813      	ldr	r0, [pc, #76]	; (8000368 <Update_Aux_State+0x1a0>)
 800031c:	f001 fd5a 	bl	8001dd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, BRAKE_Pin, auxiliary->brake);
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <Update_Aux_State+0x18c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800032a:	b2db      	uxtb	r3, r3
 800032c:	461a      	mov	r2, r3
 800032e:	2104      	movs	r1, #4
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <Update_Aux_State+0x1a0>)
 8000332:	f001 fd4f 	bl	8001dd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, FAN_Pin, auxiliary->fan);
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <Update_Aux_State+0x18c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	2180      	movs	r1, #128	; 0x80
 8000346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034a:	f001 fd43 	bl	8001dd4 <HAL_GPIO_WritePin>

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000000 	.word	0x20000000
 8000358:	20000035 	.word	0x20000035
 800035c:	20000036 	.word	0x20000036
 8000360:	20000037 	.word	0x20000037
 8000364:	20000038 	.word	0x20000038
 8000368:	48000400 	.word	0x48000400

0800036c <Update_Buttons_State_Offline_Mode>:
void Update_Buttons_State_Offline_Mode()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	Offline_Mode->brake = HAL_GPIO_ReadPin(GPIOA, BRAKE_OFFLINE_MODE_Pin);
 8000370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f001 fd14 	bl	8001da4 <HAL_GPIO_ReadPin>
 800037c:	4603      	mov	r3, r0
 800037e:	4619      	mov	r1, r3
 8000380:	4b4b      	ldr	r3, [pc, #300]	; (80004b0 <Update_Buttons_State_Offline_Mode+0x144>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	460b      	mov	r3, r1
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	b2d9      	uxtb	r1, r3
 800038c:	7813      	ldrb	r3, [r2, #0]
 800038e:	f361 1386 	bfi	r3, r1, #6, #1
 8000392:	7013      	strb	r3, [r2, #0]
	Offline_Mode->camera = HAL_GPIO_ReadPin(GPIOB, CAMERA_OFFLINE_MODE_Pin);
 8000394:	2120      	movs	r1, #32
 8000396:	4847      	ldr	r0, [pc, #284]	; (80004b4 <Update_Buttons_State_Offline_Mode+0x148>)
 8000398:	f001 fd04 	bl	8001da4 <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	4619      	mov	r1, r3
 80003a0:	4b43      	ldr	r3, [pc, #268]	; (80004b0 <Update_Buttons_State_Offline_Mode+0x144>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	460b      	mov	r3, r1
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	b2d9      	uxtb	r1, r3
 80003ac:	7813      	ldrb	r3, [r2, #0]
 80003ae:	f361 1304 	bfi	r3, r1, #4, #1
 80003b2:	7013      	strb	r3, [r2, #0]
	Offline_Mode->fan = HAL_GPIO_ReadPin(GPIOB, FAN_OFFLINE_MODE_Pin);
 80003b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b8:	483e      	ldr	r0, [pc, #248]	; (80004b4 <Update_Buttons_State_Offline_Mode+0x148>)
 80003ba:	f001 fcf3 	bl	8001da4 <HAL_GPIO_ReadPin>
 80003be:	4603      	mov	r3, r0
 80003c0:	4619      	mov	r1, r3
 80003c2:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <Update_Buttons_State_Offline_Mode+0x144>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	460b      	mov	r3, r1
 80003c8:	f003 0301 	and.w	r3, r3, #1
 80003cc:	b2d9      	uxtb	r1, r3
 80003ce:	7813      	ldrb	r3, [r2, #0]
 80003d0:	f361 13c7 	bfi	r3, r1, #7, #1
 80003d4:	7013      	strb	r3, [r2, #0]
	Offline_Mode->horn = HAL_GPIO_ReadPin(GPIOB, HORN_OFFLINE_MODE_Pin);
 80003d6:	2140      	movs	r1, #64	; 0x40
 80003d8:	4836      	ldr	r0, [pc, #216]	; (80004b4 <Update_Buttons_State_Offline_Mode+0x148>)
 80003da:	f001 fce3 	bl	8001da4 <HAL_GPIO_ReadPin>
 80003de:	4603      	mov	r3, r0
 80003e0:	4619      	mov	r1, r3
 80003e2:	4b33      	ldr	r3, [pc, #204]	; (80004b0 <Update_Buttons_State_Offline_Mode+0x144>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	460b      	mov	r3, r1
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	b2d9      	uxtb	r1, r3
 80003ee:	7813      	ldrb	r3, [r2, #0]
 80003f0:	f361 0300 	bfi	r3, r1, #0, #1
 80003f4:	7013      	strb	r3, [r2, #0]
	Offline_Mode->sign_left = HAL_GPIO_ReadPin(GPIOB, SIGN_LEFT_OFFLINE_MODE_Pin);
 80003f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fa:	482e      	ldr	r0, [pc, #184]	; (80004b4 <Update_Buttons_State_Offline_Mode+0x148>)
 80003fc:	f001 fcd2 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000400:	4603      	mov	r3, r0
 8000402:	4619      	mov	r1, r3
 8000404:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <Update_Buttons_State_Offline_Mode+0x144>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	460b      	mov	r3, r1
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	b2d9      	uxtb	r1, r3
 8000410:	7813      	ldrb	r3, [r2, #0]
 8000412:	f361 0341 	bfi	r3, r1, #1, #1
 8000416:	7013      	strb	r3, [r2, #0]
	Offline_Mode->sign_right = HAL_GPIO_ReadPin(GPIOB, SIGN_RIGHT_OFFLINE_MODE_Pin);
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	4826      	ldr	r0, [pc, #152]	; (80004b4 <Update_Buttons_State_Offline_Mode+0x148>)
 800041c:	f001 fcc2 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000420:	4603      	mov	r3, r0
 8000422:	4619      	mov	r1, r3
 8000424:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <Update_Buttons_State_Offline_Mode+0x144>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	460b      	mov	r3, r1
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	b2d9      	uxtb	r1, r3
 8000430:	7813      	ldrb	r3, [r2, #0]
 8000432:	f361 0382 	bfi	r3, r1, #2, #1
 8000436:	7013      	strb	r3, [r2, #0]

	//avarie
	if( HAL_GPIO_ReadPin(GPIOB, SIGN_LEFT_OFFLINE_MODE_Pin) && HAL_GPIO_ReadPin(GPIOB, SIGN_RIGHT_OFFLINE_MODE_Pin) )
 8000438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800043c:	481d      	ldr	r0, [pc, #116]	; (80004b4 <Update_Buttons_State_Offline_Mode+0x148>)
 800043e:	f001 fcb1 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00d      	beq.n	8000464 <Update_Buttons_State_Offline_Mode+0xf8>
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	481a      	ldr	r0, [pc, #104]	; (80004b4 <Update_Buttons_State_Offline_Mode+0x148>)
 800044c:	f001 fcaa 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d006      	beq.n	8000464 <Update_Buttons_State_Offline_Mode+0xf8>
	{
		Offline_Mode->avarie = ON;
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <Update_Buttons_State_Offline_Mode+0x144>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	7813      	ldrb	r3, [r2, #0]
 800045c:	f043 0308 	orr.w	r3, r3, #8
 8000460:	7013      	strb	r3, [r2, #0]
 8000462:	e005      	b.n	8000470 <Update_Buttons_State_Offline_Mode+0x104>
	}
	else Offline_Mode->avarie = OFF;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <Update_Buttons_State_Offline_Mode+0x144>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	7813      	ldrb	r3, [r2, #0]
 800046a:	f36f 03c3 	bfc	r3, #3, #1
 800046e:	7013      	strb	r3, [r2, #0]

	//faruri fata si spate
	if( HAL_GPIO_ReadPin(GPIOB, FRONT_LIGHT_OFFLINE_MODE_Pin) || HAL_GPIO_ReadPin(GPIOB, BACK_LIGHT_OFFLINE_MODE_Pin) )
 8000470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000474:	480f      	ldr	r0, [pc, #60]	; (80004b4 <Update_Buttons_State_Offline_Mode+0x148>)
 8000476:	f001 fc95 	bl	8001da4 <HAL_GPIO_ReadPin>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d107      	bne.n	8000490 <Update_Buttons_State_Offline_Mode+0x124>
 8000480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000484:	480b      	ldr	r0, [pc, #44]	; (80004b4 <Update_Buttons_State_Offline_Mode+0x148>)
 8000486:	f001 fc8d 	bl	8001da4 <HAL_GPIO_ReadPin>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d006      	beq.n	800049e <Update_Buttons_State_Offline_Mode+0x132>
	{
		Offline_Mode->faruri = ON;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <Update_Buttons_State_Offline_Mode+0x144>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	7813      	ldrb	r3, [r2, #0]
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	7013      	strb	r3, [r2, #0]
 800049c:	e006      	b.n	80004ac <Update_Buttons_State_Offline_Mode+0x140>
	}
	else Offline_Mode->faruri = OFF;
 800049e:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <Update_Buttons_State_Offline_Mode+0x144>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	7813      	ldrb	r3, [r2, #0]
 80004a4:	f36f 1345 	bfc	r3, #5, #1
 80004a8:	7013      	strb	r3, [r2, #0]
}
 80004aa:	bf00      	nop
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000004 	.word	0x20000004
 80004b4:	48000400 	.word	0x48000400

080004b8 <Can_Transmit_Auxiliary_Activity_Check>:
void Can_Transmit_Auxiliary_Activity_Check() //trimite mesaj la 50ms la dash
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0

	static const CAN_TxHeaderTypeDef TxHeader = {0x103, 0x00, CAN_RTR_DATA, CAN_ID_STD, 1, DISABLE };
	static const uint8_t Activity_Check[1] = {0xFF};
	static uint32_t TxMailBox;

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, Activity_Check, &TxMailBox);
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <Can_Transmit_Auxiliary_Activity_Check+0x14>)
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <Can_Transmit_Auxiliary_Activity_Check+0x18>)
 80004c0:	4904      	ldr	r1, [pc, #16]	; (80004d4 <Can_Transmit_Auxiliary_Activity_Check+0x1c>)
 80004c2:	4805      	ldr	r0, [pc, #20]	; (80004d8 <Can_Transmit_Auxiliary_Activity_Check+0x20>)
 80004c4:	f000 fd91 	bl	8000fea <HAL_CAN_AddTxMessage>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000003c 	.word	0x2000003c
 80004d0:	08003c54 	.word	0x08003c54
 80004d4:	08003c3c 	.word	0x08003c3c
 80004d8:	20000040 	.word	0x20000040

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 faf0 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81c 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f902 	bl	80006f0 <MX_GPIO_Init>
  MX_CAN_Init();
 80004ec:	f000 f85e 	bl	80005ac <MX_CAN_Init>
  MX_TIM2_Init();
 80004f0:	f000 f8b0 	bl	8000654 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000); // asteptare pentru configurarea celorlalte sisteme, daca e nevoie
 80004f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004f8:	f000 fb4a 	bl	8000b90 <HAL_Delay>

  HAL_CAN_Start(&hcan);
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <main+0x3c>)
 80004fe:	f000 fd30 	bl	8000f62 <HAL_CAN_Start>

  HAL_TIM_Base_Start_IT(&htim2); // 50ms
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <main+0x40>)
 8000504:	f002 ff16 	bl	8003334 <HAL_TIM_Base_Start_IT>
  HAL_Delay(60); // ca sa se faca odata functia Update_State cu 0x00 pentru a regla semnalizarile (TOGGLE_STATE-urile)
 8000508:	203c      	movs	r0, #60	; 0x3c
 800050a:	f000 fb41 	bl	8000b90 <HAL_Delay>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800050e:	2102      	movs	r1, #2
 8000510:	4801      	ldr	r0, [pc, #4]	; (8000518 <main+0x3c>)
 8000512:	f000 ff5c 	bl	80013ce <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	e7fe      	b.n	8000516 <main+0x3a>
 8000518:	20000040 	.word	0x20000040
 800051c:	20000068 	.word	0x20000068

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b090      	sub	sp, #64	; 0x40
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	2228      	movs	r2, #40	; 0x28
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fb4c 	bl	8003bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000542:	2301      	movs	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000554:	2302      	movs	r3, #2
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800055e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fc65 	bl	8001e38 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000574:	f000 f938 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	2302      	movs	r3, #2
 800057e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2102      	movs	r1, #2
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fc8e 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059e:	f000 f923 	bl	80007e8 <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3740      	adds	r7, #64	; 0x40
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_CAN_Init+0xa0>)
 80005b4:	4a26      	ldr	r2, [pc, #152]	; (8000650 <MX_CAN_Init+0xa4>)
 80005b6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <MX_CAN_Init+0xa0>)
 80005ba:	2212      	movs	r2, #18
 80005bc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <MX_CAN_Init+0xa0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_CAN_Init+0xa0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <MX_CAN_Init+0xa0>)
 80005cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005d0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_CAN_Init+0xa0>)
 80005d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005d8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_CAN_Init+0xa0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_CAN_Init+0xa0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_CAN_Init+0xa0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_CAN_Init+0xa0>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_CAN_Init+0xa0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_CAN_Init+0xa0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005fe:	4813      	ldr	r0, [pc, #76]	; (800064c <MX_CAN_Init+0xa0>)
 8000600:	f000 faea 	bl	8000bd8 <HAL_CAN_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800060a:	f000 f8ed 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  	CAN_FilterTypeDef canfilterconfig;

  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800060e:	2301      	movs	r3, #1
 8000610:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 10;
 8000612:	230a      	movs	r3, #10
 8000614:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = DASHBOARD_ID << 5; //this tells what to compare the incoming data to
 800061a:	f246 6360 	movw	r3, #26208	; 0x6660
 800061e:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0x0000;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = DASHBOARD_ID << 5; //this tells which bits to compare
 8000624:	f246 6360 	movw	r3, #26208	; 0x6660
 8000628:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0x0000;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000632:	2301      	movs	r3, #1
 8000634:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 10;
 8000636:	230a      	movs	r3, #10
 8000638:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	4803      	ldr	r0, [pc, #12]	; (800064c <MX_CAN_Init+0xa0>)
 8000640:	f000 fbc5 	bl	8000dce <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	; 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000040 	.word	0x20000040
 8000650:	40006400 	.word	0x40006400

08000654 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_TIM2_Init+0x98>)
 8000674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000678:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_TIM2_Init+0x98>)
 800067c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000680:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_TIM2_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_TIM2_Init+0x98>)
 800068a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800068e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_TIM2_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_TIM2_Init+0x98>)
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800069c:	4813      	ldr	r0, [pc, #76]	; (80006ec <MX_TIM2_Init+0x98>)
 800069e:	f002 fdf1 	bl	8003284 <HAL_TIM_Base_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80006a8:	f000 f89e 	bl	80007e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_TIM2_Init+0x98>)
 80006ba:	f002 ffc4 	bl	8003646 <HAL_TIM_ConfigClockSource>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80006c4:	f000 f890 	bl	80007e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_TIM2_Init+0x98>)
 80006d6:	f003 f9db 	bl	8003a90 <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80006e0:	f000 f882 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000068 	.word	0x20000068

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000706:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <MX_GPIO_Init+0xf0>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a35      	ldr	r2, [pc, #212]	; (80007e0 <MX_GPIO_Init+0xf0>)
 800070c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <MX_GPIO_Init+0xf0>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b30      	ldr	r3, [pc, #192]	; (80007e0 <MX_GPIO_Init+0xf0>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a2f      	ldr	r2, [pc, #188]	; (80007e0 <MX_GPIO_Init+0xf0>)
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_GPIO_Init+0xf0>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_GPIO_Init+0xf0>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a29      	ldr	r2, [pc, #164]	; (80007e0 <MX_GPIO_Init+0xf0>)
 800073c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_GPIO_Init+0xf0>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FEEDBACK_LED_UNUSED_Pin|FEEDBACK_LED2_UNUSED_Pin|FAN_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2186      	movs	r1, #134	; 0x86
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f001 fb3d 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIGN_LEFT_Pin|SIGN_RIGHT_Pin|BRAKE_Pin|BACK_LIGHT_Pin
 800075a:	2200      	movs	r2, #0
 800075c:	f643 4107 	movw	r1, #15367	; 0x3c07
 8000760:	4820      	ldr	r0, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xf4>)
 8000762:	f001 fb37 	bl	8001dd4 <HAL_GPIO_WritePin>
                          |FRONT_LIGHT_Pin|CAMERA_Pin|HORN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FEEDBACK_LED_UNUSED_Pin FEEDBACK_LED2_UNUSED_Pin FAN_Pin */
  GPIO_InitStruct.Pin = FEEDBACK_LED_UNUSED_Pin|FEEDBACK_LED2_UNUSED_Pin|FAN_Pin;
 8000766:	2386      	movs	r3, #134	; 0x86
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4619      	mov	r1, r3
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f001 f996 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGN_LEFT_Pin SIGN_RIGHT_Pin BRAKE_Pin BACK_LIGHT_Pin
                           FRONT_LIGHT_Pin CAMERA_Pin HORN_Pin */
  GPIO_InitStruct.Pin = SIGN_LEFT_Pin|SIGN_RIGHT_Pin|BRAKE_Pin|BACK_LIGHT_Pin
 8000784:	f643 4307 	movw	r3, #15367	; 0x3c07
 8000788:	60fb      	str	r3, [r7, #12]
                          |FRONT_LIGHT_Pin|CAMERA_Pin|HORN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4619      	mov	r1, r3
 800079c:	4811      	ldr	r0, [pc, #68]	; (80007e4 <MX_GPIO_Init+0xf4>)
 800079e:	f001 f987 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CURENT_SENSOR_Pin FRONT_LIGHT_OFFLINE_MODE_Pin RESERVE_OFFLINE_MODE_Pin CAMERA_OFFLINE_MODE_Pin
                           HORN_OFFLINE_MODE_Pin SIGN_RIGHT_OFFLINE_MODE_Pin FAN_OFFLINE_MODE_Pin SIGN_LEFT_OFFLINE_MODE_Pin */
  GPIO_InitStruct.Pin = CURENT_SENSOR_Pin|FRONT_LIGHT_OFFLINE_MODE_Pin|RESERVE_OFFLINE_MODE_Pin|CAMERA_OFFLINE_MODE_Pin
 80007a2:	f24c 33f0 	movw	r3, #50160	; 0xc3f0
 80007a6:	60fb      	str	r3, [r7, #12]
                          |HORN_OFFLINE_MODE_Pin|SIGN_RIGHT_OFFLINE_MODE_Pin|FAN_OFFLINE_MODE_Pin|SIGN_LEFT_OFFLINE_MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0xf4>)
 80007b8:	f001 f97a 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACK_LIGHT_OFFLINE_MODE_Pin ENABLE_OFFLINE_MODE_Pin BRAKE_OFFLINE_MODE_Pin */
  GPIO_InitStruct.Pin = BACK_LIGHT_OFFLINE_MODE_Pin|ENABLE_OFFLINE_MODE_Pin|BRAKE_OFFLINE_MODE_Pin;
 80007bc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d4:	f001 f96c 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000400 	.word	0x48000400

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <HAL_MspInit+0x44>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <HAL_MspInit+0x44>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <HAL_MspInit+0x44>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x44>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x44>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	61d3      	str	r3, [r2, #28]
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x44>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <HAL_CAN_MspInit+0x90>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d131      	bne.n	80008c2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_CAN_MspInit+0x94>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <HAL_CAN_MspInit+0x94>)
 8000864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_CAN_MspInit+0x94>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_CAN_MspInit+0x94>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <HAL_CAN_MspInit+0x94>)
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_CAN_MspInit+0x94>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800088e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80008a0:	2309      	movs	r3, #9
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f001 f8ff 	bl	8001ab0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2014      	movs	r0, #20
 80008b8:	f001 f8c3 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80008bc:	2014      	movs	r0, #20
 80008be:	f001 f8dc 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40006400 	.word	0x40006400
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e4:	d113      	bne.n	800090e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_TIM_Base_MspInit+0x44>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <HAL_TIM_Base_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_TIM_Base_MspInit+0x44>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2101      	movs	r1, #1
 8000902:	201c      	movs	r0, #28
 8000904:	f001 f89d 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000908:	201c      	movs	r0, #28
 800090a:	f001 f8b6 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f8f2 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

	static CAN_RxHeaderTypeDef Rx_Dash_Header;
	static uint8_t Rx_Dash_Data[1];

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <USB_LP_CAN_RX0_IRQHandler+0x34>)
 8000976:	f000 fd50 	bl	800141a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &Rx_Dash_Header, Rx_Dash_Data);
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <USB_LP_CAN_RX0_IRQHandler+0x38>)
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <USB_LP_CAN_RX0_IRQHandler+0x3c>)
 800097e:	2100      	movs	r1, #0
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <USB_LP_CAN_RX0_IRQHandler+0x34>)
 8000982:	f000 fc02 	bl	800118a <HAL_CAN_GetRxMessage>
  if(Offline_Mode_Switch == OFF)
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <USB_LP_CAN_RX0_IRQHandler+0x40>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d107      	bne.n	800099e <USB_LP_CAN_RX0_IRQHandler+0x2e>
  {
	  auxiliary->state = Rx_Dash_Data[0];
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <USB_LP_CAN_RX0_IRQHandler+0x44>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <USB_LP_CAN_RX0_IRQHandler+0x38>)
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	701a      	strb	r2, [r3, #0]
	  Dash_Activity = 0;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <USB_LP_CAN_RX0_IRQHandler+0x48>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000040 	.word	0x20000040
 80009a8:	200000d4 	.word	0x200000d4
 80009ac:	200000b8 	.word	0x200000b8
 80009b0:	200000b5 	.word	0x200000b5
 80009b4:	20000000 	.word	0x20000000
 80009b8:	200000b4 	.word	0x200000b4

080009bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void) // 50ms
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009c0:	481d      	ldr	r0, [pc, #116]	; (8000a38 <TIM2_IRQHandler+0x7c>)
 80009c2:	f002 fd21 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

   Offline_Mode_Switch = HAL_GPIO_ReadPin(GPIOA, ENABLE_OFFLINE_MODE_Pin);
 80009c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f001 f9e9 	bl	8001da4 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <TIM2_IRQHandler+0x80>)
 80009d8:	701a      	strb	r2, [r3, #0]

   if(Dash_Activity <= 100 && Offline_Mode_Switch == OFF) // 5 secunde daca Dnu se trimite niciun semnal de CAN
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <TIM2_IRQHandler+0x84>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b64      	cmp	r3, #100	; 0x64
 80009e0:	d80a      	bhi.n	80009f8 <TIM2_IRQHandler+0x3c>
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <TIM2_IRQHandler+0x80>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d106      	bne.n	80009f8 <TIM2_IRQHandler+0x3c>
   {
	  Dash_Activity++;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <TIM2_IRQHandler+0x84>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <TIM2_IRQHandler+0x84>)
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	e018      	b.n	8000a2a <TIM2_IRQHandler+0x6e>
   }

   else if(Dash_Activity > 100 && Offline_Mode_Switch == OFF)
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <TIM2_IRQHandler+0x84>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b64      	cmp	r3, #100	; 0x64
 80009fe:	d908      	bls.n	8000a12 <TIM2_IRQHandler+0x56>
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <TIM2_IRQHandler+0x80>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d104      	bne.n	8000a12 <TIM2_IRQHandler+0x56>
   {
	   auxiliary->state = SAFE_STATE;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <TIM2_IRQHandler+0x88>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	22ff      	movs	r2, #255	; 0xff
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e00b      	b.n	8000a2a <TIM2_IRQHandler+0x6e>
   }

   else if(Offline_Mode_Switch == ON)
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <TIM2_IRQHandler+0x80>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d107      	bne.n	8000a2a <TIM2_IRQHandler+0x6e>
   {
	   Update_Buttons_State_Offline_Mode();
 8000a1a:	f7ff fca7 	bl	800036c <Update_Buttons_State_Offline_Mode>
	   auxiliary->state = Offline_Mode->state;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <TIM2_IRQHandler+0x8c>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <TIM2_IRQHandler+0x88>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	7812      	ldrb	r2, [r2, #0]
 8000a28:	701a      	strb	r2, [r3, #0]
   }

   Update_Aux_State();
 8000a2a:	f7ff fbcd 	bl	80001c8 <Update_Aux_State>

   Can_Transmit_Auxiliary_Activity_Check();
 8000a2e:	f7ff fd43 	bl	80004b8 <Can_Transmit_Auxiliary_Activity_Check>

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000068 	.word	0x20000068
 8000a3c:	200000b5 	.word	0x200000b5
 8000a40:	200000b4 	.word	0x200000b4
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000004 	.word	0x20000004

08000a4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a74:	f7ff ffea 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	; (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	; (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f003 f89d 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa2:	f7ff fd1b 	bl	80004dc <main>

08000aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ab4:	08003c90 	.word	0x08003c90
  ldr r2, =_sbss
 8000ab8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000abc:	200000dc 	.word	0x200000dc

08000ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_2_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x28>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_Init+0x28>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 ffa9 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	200f      	movs	r0, #15
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff fe88 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40022000 	.word	0x40022000

08000af0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 ffc1 	bl	8001a96 <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 ff89 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000010 	.word	0x20000010
 8000b4c:	2000000c 	.word	0x2000000c

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000010 	.word	0x20000010
 8000b74:	200000d8 	.word	0x200000d8

08000b78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200000d8 	.word	0x200000d8

08000b90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff ffee 	bl	8000b78 <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_Delay+0x44>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bb6:	bf00      	nop
 8000bb8:	f7ff ffde 	bl	8000b78 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000010 	.word	0x20000010

08000bd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e0ed      	b.n	8000dc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d102      	bne.n	8000bfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fe20 	bl	800083c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f042 0201 	orr.w	r2, r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c0c:	f7ff ffb4 	bl	8000b78 <HAL_GetTick>
 8000c10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c12:	e012      	b.n	8000c3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c14:	f7ff ffb0 	bl	8000b78 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b0a      	cmp	r3, #10
 8000c20:	d90b      	bls.n	8000c3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2205      	movs	r2, #5
 8000c32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e0c5      	b.n	8000dc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0e5      	beq.n	8000c14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0202 	bic.w	r2, r2, #2
 8000c56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c58:	f7ff ff8e 	bl	8000b78 <HAL_GetTick>
 8000c5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c5e:	e012      	b.n	8000c86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c60:	f7ff ff8a 	bl	8000b78 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b0a      	cmp	r3, #10
 8000c6c:	d90b      	bls.n	8000c86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2205      	movs	r2, #5
 8000c7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e09f      	b.n	8000dc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1e5      	bne.n	8000c60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e1b      	ldrb	r3, [r3, #24]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d108      	bne.n	8000cae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e007      	b.n	8000cbe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7e5b      	ldrb	r3, [r3, #25]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d108      	bne.n	8000cd8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	e007      	b.n	8000ce8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7e9b      	ldrb	r3, [r3, #26]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d108      	bne.n	8000d02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0220 	orr.w	r2, r2, #32
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	e007      	b.n	8000d12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 0220 	bic.w	r2, r2, #32
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7edb      	ldrb	r3, [r3, #27]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0210 	bic.w	r2, r2, #16
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 0210 	orr.w	r2, r2, #16
 8000d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7f1b      	ldrb	r3, [r3, #28]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d108      	bne.n	8000d56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0208 	orr.w	r2, r2, #8
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	e007      	b.n	8000d66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0208 	bic.w	r2, r2, #8
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7f5b      	ldrb	r3, [r3, #29]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d108      	bne.n	8000d80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f042 0204 	orr.w	r2, r2, #4
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e007      	b.n	8000d90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0204 	bic.w	r2, r2, #4
 8000d8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	ea42 0103 	orr.w	r1, r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	1e5a      	subs	r2, r3, #1
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b087      	sub	sp, #28
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000de6:	7cfb      	ldrb	r3, [r7, #19]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d003      	beq.n	8000df4 <HAL_CAN_ConfigFilter+0x26>
 8000dec:	7cfb      	ldrb	r3, [r7, #19]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	f040 80aa 	bne.w	8000f48 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dfa:	f043 0201 	orr.w	r2, r3, #1
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d123      	bne.n	8000e76 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	401a      	ands	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e50:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3248      	adds	r2, #72	; 0x48
 8000e56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e6a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e6c:	6979      	ldr	r1, [r7, #20]
 8000e6e:	3348      	adds	r3, #72	; 0x48
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	440b      	add	r3, r1
 8000e74:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d122      	bne.n	8000ec4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	431a      	orrs	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3248      	adds	r2, #72	; 0x48
 8000ea4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eb8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eba:	6979      	ldr	r1, [r7, #20]
 8000ebc:	3348      	adds	r3, #72	; 0x48
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d109      	bne.n	8000ee0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ede:	e007      	b.n	8000ef0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d109      	bne.n	8000f0c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f0a:	e007      	b.n	8000f1c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d107      	bne.n	8000f34 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f3a:	f023 0201 	bic.w	r2, r3, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e006      	b.n	8000f56 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
  }
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d12e      	bne.n	8000fd4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f8e:	f7ff fdf3 	bl	8000b78 <HAL_GetTick>
 8000f92:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f94:	e012      	b.n	8000fbc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f96:	f7ff fdef 	bl	8000b78 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b0a      	cmp	r3, #10
 8000fa2:	d90b      	bls.n	8000fbc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e012      	b.n	8000fe2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e5      	bne.n	8000f96 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e006      	b.n	8000fe2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
  }
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b089      	sub	sp, #36	; 0x24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001008:	7ffb      	ldrb	r3, [r7, #31]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d003      	beq.n	8001016 <HAL_CAN_AddTxMessage+0x2c>
 800100e:	7ffb      	ldrb	r3, [r7, #31]
 8001010:	2b02      	cmp	r3, #2
 8001012:	f040 80ad 	bne.w	8001170 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10a      	bne.n	8001036 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 8095 	beq.w	8001160 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	0e1b      	lsrs	r3, r3, #24
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001040:	2201      	movs	r2, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	409a      	lsls	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10d      	bne.n	800106e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	6809      	ldr	r1, [r1, #0]
 8001060:	431a      	orrs	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3318      	adds	r3, #24
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	440b      	add	r3, r1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e00f      	b.n	800108e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001078:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800107e:	68f9      	ldr	r1, [r7, #12]
 8001080:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001082:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3318      	adds	r3, #24
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	440b      	add	r3, r1
 800108c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6819      	ldr	r1, [r3, #0]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3318      	adds	r3, #24
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	440b      	add	r3, r1
 800109e:	3304      	adds	r3, #4
 80010a0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	7d1b      	ldrb	r3, [r3, #20]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d111      	bne.n	80010ce <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3318      	adds	r3, #24
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	3304      	adds	r3, #4
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	6811      	ldr	r1, [r2, #0]
 80010be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3318      	adds	r3, #24
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	440b      	add	r3, r1
 80010ca:	3304      	adds	r3, #4
 80010cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3307      	adds	r3, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	061a      	lsls	r2, r3, #24
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3306      	adds	r3, #6
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	041b      	lsls	r3, r3, #16
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3305      	adds	r3, #5
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4313      	orrs	r3, r2
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	3204      	adds	r2, #4
 80010ee:	7812      	ldrb	r2, [r2, #0]
 80010f0:	4610      	mov	r0, r2
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	6811      	ldr	r1, [r2, #0]
 80010f6:	ea43 0200 	orr.w	r2, r3, r0
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	440b      	add	r3, r1
 8001100:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001104:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3303      	adds	r3, #3
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	061a      	lsls	r2, r3, #24
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3302      	adds	r3, #2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	041b      	lsls	r3, r3, #16
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3301      	adds	r3, #1
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	4313      	orrs	r3, r2
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	4610      	mov	r0, r2
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	6811      	ldr	r1, [r2, #0]
 800112c:	ea43 0200 	orr.w	r2, r3, r0
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	440b      	add	r3, r1
 8001136:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800113a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3318      	adds	r3, #24
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	4413      	add	r3, r2
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	6811      	ldr	r1, [r2, #0]
 800114e:	f043 0201 	orr.w	r2, r3, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3318      	adds	r3, #24
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	440b      	add	r3, r1
 800115a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	e00e      	b.n	800117e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e006      	b.n	800117e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800118a:	b480      	push	{r7}
 800118c:	b087      	sub	sp, #28
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d003      	beq.n	80011ae <HAL_CAN_GetRxMessage+0x24>
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	f040 8103 	bne.w	80013b4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10e      	bne.n	80011d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d116      	bne.n	80011f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0f7      	b.n	80013c2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0e8      	b.n	80013c2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	331b      	adds	r3, #27
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0204 	and.w	r2, r3, #4
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	331b      	adds	r3, #27
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4413      	add	r3, r2
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	0d5b      	lsrs	r3, r3, #21
 800121e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e00b      	b.n	8001240 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	331b      	adds	r3, #27
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	331b      	adds	r3, #27
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0202 	and.w	r2, r3, #2
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	331b      	adds	r3, #27
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4413      	add	r3, r2
 8001262:	3304      	adds	r3, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2208      	movs	r2, #8
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	e00b      	b.n	800128e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	331b      	adds	r3, #27
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4413      	add	r3, r2
 8001282:	3304      	adds	r3, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 020f 	and.w	r2, r3, #15
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	331b      	adds	r3, #27
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	4413      	add	r3, r2
 800129a:	3304      	adds	r3, #4
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	331b      	adds	r3, #27
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	4413      	add	r3, r2
 80012b2:	3304      	adds	r3, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0c1b      	lsrs	r3, r3, #16
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	4413      	add	r3, r2
 80012de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	0a1a      	lsrs	r2, r3, #8
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0c1a      	lsrs	r2, r3, #16
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3302      	adds	r3, #2
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4413      	add	r3, r2
 8001312:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0e1a      	lsrs	r2, r3, #24
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3303      	adds	r3, #3
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4413      	add	r3, r2
 800132c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	3304      	adds	r3, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	0a1a      	lsrs	r2, r3, #8
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	3305      	adds	r3, #5
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	4413      	add	r3, r2
 800135e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	0c1a      	lsrs	r2, r3, #16
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3306      	adds	r3, #6
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	4413      	add	r3, r2
 8001378:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	0e1a      	lsrs	r2, r3, #24
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	3307      	adds	r3, #7
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d108      	bne.n	80013a0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	e007      	b.n	80013b0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	691a      	ldr	r2, [r3, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0220 	orr.w	r2, r2, #32
 80013ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e006      	b.n	80013c2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
  }
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	371c      	adds	r7, #28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d002      	beq.n	80013ec <HAL_CAN_ActivateNotification+0x1e>
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d109      	bne.n	8001400 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6959      	ldr	r1, [r3, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e006      	b.n	800140e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
  }
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b08a      	sub	sp, #40	; 0x28
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d07c      	beq.n	800155a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d023      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2201      	movs	r2, #1
 8001470:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f983 	bl	8001788 <HAL_CAN_TxMailbox0CompleteCallback>
 8001482:	e016      	b.n	80014b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	d004      	beq.n	8001498 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
 8001496:	e00c      	b.n	80014b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d004      	beq.n	80014ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
 80014aa:	e002      	b.n	80014b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f989 	bl	80017c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d024      	beq.n	8001506 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f963 	bl	800179c <HAL_CAN_TxMailbox1CompleteCallback>
 80014d6:	e016      	b.n	8001506 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ea:	e00c      	b.n	8001506 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d004      	beq.n	8001500 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
 80014fe:	e002      	b.n	8001506 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f969 	bl	80017d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d024      	beq.n	800155a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001518:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f943 	bl	80017b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800152a:	e016      	b.n	800155a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
 800153e:	e00c      	b.n	800155a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	e002      	b.n	800155a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f949 	bl	80017ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00c      	beq.n	800157e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001574:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2210      	movs	r2, #16
 800157c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00b      	beq.n	80015a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d006      	beq.n	80015a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2208      	movs	r2, #8
 8001598:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f93a 	bl	8001814 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f921 	bl	8001800 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00c      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2210      	movs	r2, #16
 80015e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00b      	beq.n	8001604 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2208      	movs	r2, #8
 80015fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f91c 	bl	800183c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f903 	bl	8001828 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00b      	beq.n	8001644 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2210      	movs	r2, #16
 800163c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f906 	bl	8001850 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2208      	movs	r2, #8
 800165e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f8ff 	bl	8001864 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d07b      	beq.n	8001768 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	d072      	beq.n	8001760 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d043      	beq.n	8001760 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03e      	beq.n	8001760 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016e8:	2b60      	cmp	r3, #96	; 0x60
 80016ea:	d02b      	beq.n	8001744 <HAL_CAN_IRQHandler+0x32a>
 80016ec:	2b60      	cmp	r3, #96	; 0x60
 80016ee:	d82e      	bhi.n	800174e <HAL_CAN_IRQHandler+0x334>
 80016f0:	2b50      	cmp	r3, #80	; 0x50
 80016f2:	d022      	beq.n	800173a <HAL_CAN_IRQHandler+0x320>
 80016f4:	2b50      	cmp	r3, #80	; 0x50
 80016f6:	d82a      	bhi.n	800174e <HAL_CAN_IRQHandler+0x334>
 80016f8:	2b40      	cmp	r3, #64	; 0x40
 80016fa:	d019      	beq.n	8001730 <HAL_CAN_IRQHandler+0x316>
 80016fc:	2b40      	cmp	r3, #64	; 0x40
 80016fe:	d826      	bhi.n	800174e <HAL_CAN_IRQHandler+0x334>
 8001700:	2b30      	cmp	r3, #48	; 0x30
 8001702:	d010      	beq.n	8001726 <HAL_CAN_IRQHandler+0x30c>
 8001704:	2b30      	cmp	r3, #48	; 0x30
 8001706:	d822      	bhi.n	800174e <HAL_CAN_IRQHandler+0x334>
 8001708:	2b10      	cmp	r3, #16
 800170a:	d002      	beq.n	8001712 <HAL_CAN_IRQHandler+0x2f8>
 800170c:	2b20      	cmp	r3, #32
 800170e:	d005      	beq.n	800171c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001710:	e01d      	b.n	800174e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800171a:	e019      	b.n	8001750 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001724:	e014      	b.n	8001750 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800172e:	e00f      	b.n	8001750 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001738:	e00a      	b.n	8001750 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001742:	e005      	b.n	8001750 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800174c:	e000      	b.n	8001750 <HAL_CAN_IRQHandler+0x336>
            break;
 800174e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800175e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2204      	movs	r2, #4
 8001766:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f87c 	bl	8001878 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff29 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff3e 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff8e 	bl	8001980 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5d 	bl	800192c <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff31 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa2 	bl	80019e8 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	e154      	b.n	8001d6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8146 	beq.w	8001d64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d005      	beq.n	8001af0 <HAL_GPIO_Init+0x40>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d130      	bne.n	8001b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b26:	2201      	movs	r2, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 0201 	and.w	r2, r3, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d017      	beq.n	8001b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d123      	bne.n	8001be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	6939      	ldr	r1, [r7, #16]
 8001bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0203 	and.w	r2, r3, #3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80a0 	beq.w	8001d64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c24:	4b58      	ldr	r3, [pc, #352]	; (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a57      	ldr	r2, [pc, #348]	; (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3c:	4a53      	ldr	r2, [pc, #332]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c66:	d019      	beq.n	8001c9c <HAL_GPIO_Init+0x1ec>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a49      	ldr	r2, [pc, #292]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d013      	beq.n	8001c98 <HAL_GPIO_Init+0x1e8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a48      	ldr	r2, [pc, #288]	; (8001d94 <HAL_GPIO_Init+0x2e4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d00d      	beq.n	8001c94 <HAL_GPIO_Init+0x1e4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a47      	ldr	r2, [pc, #284]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d007      	beq.n	8001c90 <HAL_GPIO_Init+0x1e0>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a46      	ldr	r2, [pc, #280]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d101      	bne.n	8001c8c <HAL_GPIO_Init+0x1dc>
 8001c88:	2304      	movs	r3, #4
 8001c8a:	e008      	b.n	8001c9e <HAL_GPIO_Init+0x1ee>
 8001c8c:	2305      	movs	r3, #5
 8001c8e:	e006      	b.n	8001c9e <HAL_GPIO_Init+0x1ee>
 8001c90:	2303      	movs	r3, #3
 8001c92:	e004      	b.n	8001c9e <HAL_GPIO_Init+0x1ee>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e002      	b.n	8001c9e <HAL_GPIO_Init+0x1ee>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_GPIO_Init+0x1ee>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	f002 0203 	and.w	r2, r2, #3
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	4093      	lsls	r3, r2
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cae:	4937      	ldr	r1, [pc, #220]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbc:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ce0:	4a2f      	ldr	r2, [pc, #188]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d0a:	4a25      	ldr	r2, [pc, #148]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d34:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f aea3 	bne.w	8001ac0 <HAL_GPIO_Init+0x10>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	48000400 	.word	0x48000400
 8001d94:	48000800 	.word	0x48000800
 8001d98:	48000c00 	.word	0x48000c00
 8001d9c:	48001000 	.word	0x48001000
 8001da0:	40010400 	.word	0x40010400

08001da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e001      	b.n	8001dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	041a      	lsls	r2, r3, #16
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43d9      	mvns	r1, r3
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	400b      	ands	r3, r1
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f001 b823 	b.w	8002ea4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 817d 	beq.w	800216e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e74:	4bbc      	ldr	r3, [pc, #752]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d00c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e80:	4bb9      	ldr	r3, [pc, #740]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d15c      	bne.n	8001f46 <HAL_RCC_OscConfig+0x10e>
 8001e8c:	4bb6      	ldr	r3, [pc, #728]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d155      	bne.n	8001f46 <HAL_RCC_OscConfig+0x10e>
 8001e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e9e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_OscConfig+0x94>
 8001ec6:	4ba8      	ldr	r3, [pc, #672]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	e015      	b.n	8001ef8 <HAL_RCC_OscConfig+0xc0>
 8001ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ee8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ef4:	4b9c      	ldr	r3, [pc, #624]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001efc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f04:	fa92 f2a2 	rbit	r2, r2
 8001f08:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f10:	fab2 f282 	clz	r2, r2
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	f042 0220 	orr.w	r2, r2, #32
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f002 021f 	and.w	r2, r2, #31
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f202 	lsl.w	r2, r1, r2
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 811f 	beq.w	800216c <HAL_RCC_OscConfig+0x334>
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 8116 	bne.w	800216c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f000 bfaf 	b.w	8002ea4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x12e>
 8001f58:	4b83      	ldr	r3, [pc, #524]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a82      	ldr	r2, [pc, #520]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e036      	b.n	8001fd4 <HAL_RCC_OscConfig+0x19c>
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x158>
 8001f76:	4b7c      	ldr	r3, [pc, #496]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a7b      	ldr	r2, [pc, #492]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b79      	ldr	r3, [pc, #484]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a78      	ldr	r2, [pc, #480]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e021      	b.n	8001fd4 <HAL_RCC_OscConfig+0x19c>
 8001f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x184>
 8001fa2:	4b71      	ldr	r3, [pc, #452]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a70      	ldr	r2, [pc, #448]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6d      	ldr	r2, [pc, #436]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0x19c>
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a69      	ldr	r2, [pc, #420]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4b67      	ldr	r3, [pc, #412]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a66      	ldr	r2, [pc, #408]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	f023 020f 	bic.w	r2, r3, #15
 8001fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	495f      	ldr	r1, [pc, #380]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d059      	beq.n	80020b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fdbb 	bl	8000b78 <HAL_GetTick>
 8002002:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	e00a      	b.n	800201e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002008:	f7fe fdb6 	bl	8000b78 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b64      	cmp	r3, #100	; 0x64
 8002016:	d902      	bls.n	800201e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	f000 bf43 	b.w	8002ea4 <HAL_RCC_OscConfig+0x106c>
 800201e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002022:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002032:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_RCC_OscConfig+0x218>
 800204a:	4b47      	ldr	r3, [pc, #284]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	e015      	b.n	800207c <HAL_RCC_OscConfig+0x244>
 8002050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002054:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002068:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800206c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002078:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002080:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002084:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002090:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f042 0220 	orr.w	r2, r2, #32
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	f002 021f 	and.w	r2, r2, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f202 	lsl.w	r2, r1, r2
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ab      	beq.n	8002008 <HAL_RCC_OscConfig+0x1d0>
 80020b0:	e05d      	b.n	800216e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7fe fd61 	bl	8000b78 <HAL_GetTick>
 80020b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7fe fd5c 	bl	8000b78 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	; 0x64
 80020ca:	d902      	bls.n	80020d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	f000 bee9 	b.w	8002ea4 <HAL_RCC_OscConfig+0x106c>
 80020d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80020e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	095b      	lsrs	r3, r3, #5
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d102      	bne.n	8002104 <HAL_RCC_OscConfig+0x2cc>
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	e015      	b.n	8002130 <HAL_RCC_OscConfig+0x2f8>
 8002104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002108:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002120:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_RCC_OscConfig+0x330>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002134:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002138:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800213c:	fa92 f2a2 	rbit	r2, r2
 8002140:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002144:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f002 021f 	and.w	r2, r2, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ab      	bne.n	80020bc <HAL_RCC_OscConfig+0x284>
 8002164:	e003      	b.n	800216e <HAL_RCC_OscConfig+0x336>
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002172:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 817d 	beq.w	800247e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002184:	4ba6      	ldr	r3, [pc, #664]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002190:	4ba3      	ldr	r3, [pc, #652]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b08      	cmp	r3, #8
 800219a:	d172      	bne.n	8002282 <HAL_RCC_OscConfig+0x44a>
 800219c:	4ba0      	ldr	r3, [pc, #640]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d16c      	bne.n	8002282 <HAL_RCC_OscConfig+0x44a>
 80021a8:	2302      	movs	r3, #2
 80021aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80021ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d102      	bne.n	80021d8 <HAL_RCC_OscConfig+0x3a0>
 80021d2:	4b93      	ldr	r3, [pc, #588]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	e013      	b.n	8002200 <HAL_RCC_OscConfig+0x3c8>
 80021d8:	2302      	movs	r3, #2
 80021da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80021ea:	2302      	movs	r3, #2
 80021ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80021f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80021fc:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	2202      	movs	r2, #2
 8002202:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002206:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800220a:	fa92 f2a2 	rbit	r2, r2
 800220e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002212:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002216:	fab2 f282 	clz	r2, r2
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	f042 0220 	orr.w	r2, r2, #32
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	f002 021f 	and.w	r2, r2, #31
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f202 	lsl.w	r2, r1, r2
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCC_OscConfig+0x410>
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d002      	beq.n	8002248 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	f000 be2e 	b.w	8002ea4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b75      	ldr	r3, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002254:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	21f8      	movs	r1, #248	; 0xf8
 800225e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002266:	fa91 f1a1 	rbit	r1, r1
 800226a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800226e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002272:	fab1 f181 	clz	r1, r1
 8002276:	b2c9      	uxtb	r1, r1
 8002278:	408b      	lsls	r3, r1
 800227a:	4969      	ldr	r1, [pc, #420]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002280:	e0fd      	b.n	800247e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8088 	beq.w	80023a4 <HAL_RCC_OscConfig+0x56c>
 8002294:	2301      	movs	r3, #1
 8002296:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80022a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	461a      	mov	r2, r3
 80022bc:	2301      	movs	r3, #1
 80022be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fc5a 	bl	8000b78 <HAL_GetTick>
 80022c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ca:	f7fe fc55 	bl	8000b78 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d902      	bls.n	80022e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	f000 bde2 	b.w	8002ea4 <HAL_RCC_OscConfig+0x106c>
 80022e0:	2302      	movs	r3, #2
 80022e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80022f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <HAL_RCC_OscConfig+0x4d8>
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	e013      	b.n	8002338 <HAL_RCC_OscConfig+0x500>
 8002310:	2302      	movs	r3, #2
 8002312:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002322:	2302      	movs	r3, #2
 8002324:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002328:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002334:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2202      	movs	r2, #2
 800233a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800233e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002342:	fa92 f2a2 	rbit	r2, r2
 8002346:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800234a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800234e:	fab2 f282 	clz	r2, r2
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f042 0220 	orr.w	r2, r2, #32
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	f002 021f 	and.w	r2, r2, #31
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f202 	lsl.w	r2, r1, r2
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0af      	beq.n	80022ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	21f8      	movs	r1, #248	; 0xf8
 8002380:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002388:	fa91 f1a1 	rbit	r1, r1
 800238c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002390:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002394:	fab1 f181 	clz	r1, r1
 8002398:	b2c9      	uxtb	r1, r1
 800239a:	408b      	lsls	r3, r1
 800239c:	4920      	ldr	r1, [pc, #128]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]
 80023a2:	e06c      	b.n	800247e <HAL_RCC_OscConfig+0x646>
 80023a4:	2301      	movs	r3, #1
 80023a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80023b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	461a      	mov	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fbd2 	bl	8000b78 <HAL_GetTick>
 80023d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023da:	f7fe fbcd 	bl	8000b78 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d902      	bls.n	80023f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	f000 bd5a 	b.w	8002ea4 <HAL_RCC_OscConfig+0x106c>
 80023f0:	2302      	movs	r3, #2
 80023f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d104      	bne.n	8002424 <HAL_RCC_OscConfig+0x5ec>
 800241a:	4b01      	ldr	r3, [pc, #4]	; (8002420 <HAL_RCC_OscConfig+0x5e8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	e015      	b.n	800244c <HAL_RCC_OscConfig+0x614>
 8002420:	40021000 	.word	0x40021000
 8002424:	2302      	movs	r3, #2
 8002426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002436:	2302      	movs	r3, #2
 8002438:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800243c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002448:	4bc8      	ldr	r3, [pc, #800]	; (800276c <HAL_RCC_OscConfig+0x934>)
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	2202      	movs	r2, #2
 800244e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002452:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002456:	fa92 f2a2 	rbit	r2, r2
 800245a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800245e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002462:	fab2 f282 	clz	r2, r2
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	f042 0220 	orr.w	r2, r2, #32
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f002 021f 	and.w	r2, r2, #31
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1ad      	bne.n	80023da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8110 	beq.w	80026b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d079      	beq.n	8002598 <HAL_RCC_OscConfig+0x760>
 80024a4:	2301      	movs	r3, #1
 80024a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80024b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	4bab      	ldr	r3, [pc, #684]	; (8002770 <HAL_RCC_OscConfig+0x938>)
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	461a      	mov	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fb53 	bl	8000b78 <HAL_GetTick>
 80024d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d8:	f7fe fb4e 	bl	8000b78 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d902      	bls.n	80024ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	f000 bcdb 	b.w	8002ea4 <HAL_RCC_OscConfig+0x106c>
 80024ee:	2302      	movs	r3, #2
 80024f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002508:	2202      	movs	r2, #2
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800252c:	2202      	movs	r2, #2
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002546:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002548:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x934>)
 800254a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002554:	2102      	movs	r1, #2
 8002556:	6019      	str	r1, [r3, #0]
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f1a3 	rbit	r1, r3
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800256e:	6019      	str	r1, [r3, #0]
  return result;
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0a0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x6a0>
 8002596:	e08d      	b.n	80026b4 <HAL_RCC_OscConfig+0x87c>
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	fa93 f2a3 	rbit	r2, r3
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025ba:	601a      	str	r2, [r3, #0]
  return result;
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b68      	ldr	r3, [pc, #416]	; (8002770 <HAL_RCC_OscConfig+0x938>)
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	461a      	mov	r2, r3
 80025d6:	2300      	movs	r3, #0
 80025d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7fe facd 	bl	8000b78 <HAL_GetTick>
 80025de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe fac8 	bl	8000b78 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d902      	bls.n	80025fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	f000 bc55 	b.w	8002ea4 <HAL_RCC_OscConfig+0x106c>
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002602:	2202      	movs	r2, #2
 8002604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002618:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002626:	2202      	movs	r2, #2
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fa93 f2a3 	rbit	r2, r3
 8002638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800264a:	2202      	movs	r2, #2
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002664:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_OscConfig+0x934>)
 8002668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002672:	2102      	movs	r1, #2
 8002674:	6019      	str	r1, [r3, #0]
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f1a3 	rbit	r1, r3
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800268c:	6019      	str	r1, [r3, #0]
  return result;
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d197      	bne.n	80025e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 81a1 	beq.w	8002a0c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d0:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_RCC_OscConfig+0x934>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d116      	bne.n	800270a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_RCC_OscConfig+0x934>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <HAL_RCC_OscConfig+0x934>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	61d3      	str	r3, [r2, #28]
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_OscConfig+0x934>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002702:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002704:	2301      	movs	r3, #1
 8002706:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_RCC_OscConfig+0x93c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11a      	bne.n	800274c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_RCC_OscConfig+0x93c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <HAL_RCC_OscConfig+0x93c>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002720:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7fe fa29 	bl	8000b78 <HAL_GetTick>
 8002726:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	e009      	b.n	8002740 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7fe fa24 	bl	8000b78 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	; 0x64
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e3b1      	b.n	8002ea4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_RCC_OscConfig+0x93c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ef      	beq.n	800272c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d10d      	bne.n	8002778 <HAL_RCC_OscConfig+0x940>
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_RCC_OscConfig+0x934>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4a02      	ldr	r2, [pc, #8]	; (800276c <HAL_RCC_OscConfig+0x934>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6213      	str	r3, [r2, #32]
 8002768:	e03c      	b.n	80027e4 <HAL_RCC_OscConfig+0x9ac>
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	10908120 	.word	0x10908120
 8002774:	40007000 	.word	0x40007000
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x96a>
 8002788:	4bc1      	ldr	r3, [pc, #772]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4ac0      	ldr	r2, [pc, #768]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	4bbe      	ldr	r3, [pc, #760]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4abd      	ldr	r2, [pc, #756]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 800279a:	f023 0304 	bic.w	r3, r3, #4
 800279e:	6213      	str	r3, [r2, #32]
 80027a0:	e020      	b.n	80027e4 <HAL_RCC_OscConfig+0x9ac>
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x994>
 80027b2:	4bb7      	ldr	r3, [pc, #732]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4ab6      	ldr	r2, [pc, #728]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	4bb4      	ldr	r3, [pc, #720]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4ab3      	ldr	r2, [pc, #716]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0x9ac>
 80027cc:	4bb0      	ldr	r3, [pc, #704]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4aaf      	ldr	r2, [pc, #700]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	4bad      	ldr	r3, [pc, #692]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4aac      	ldr	r2, [pc, #688]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8081 	beq.w	80028f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fe f9bf 	bl	8000b78 <HAL_GetTick>
 80027fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7fe f9ba 	bl	8000b78 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e345      	b.n	8002ea4 <HAL_RCC_OscConfig+0x106c>
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002820:	2202      	movs	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002844:	2202      	movs	r2, #2
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	fa93 f2a3 	rbit	r2, r3
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800285e:	601a      	str	r2, [r3, #0]
  return result;
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002868:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d102      	bne.n	8002884 <HAL_RCC_OscConfig+0xa4c>
 800287e:	4b84      	ldr	r3, [pc, #528]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	e013      	b.n	80028ac <HAL_RCC_OscConfig+0xa74>
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800288c:	2202      	movs	r2, #2
 800288e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002894:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	fa93 f2a3 	rbit	r2, r3
 800289e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	4b79      	ldr	r3, [pc, #484]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028b4:	2102      	movs	r1, #2
 80028b6:	6011      	str	r1, [r2, #0]
 80028b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	fa92 f1a2 	rbit	r1, r2
 80028c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028ce:	6011      	str	r1, [r2, #0]
  return result;
 80028d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	fab2 f282 	clz	r2, r2
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f002 021f 	and.w	r2, r2, #31
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d084      	beq.n	8002800 <HAL_RCC_OscConfig+0x9c8>
 80028f6:	e07f      	b.n	80029f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f8:	f7fe f93e 	bl	8000b78 <HAL_GetTick>
 80028fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe f939 	bl	8000b78 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e2c4      	b.n	8002ea4 <HAL_RCC_OscConfig+0x106c>
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002922:	2202      	movs	r2, #2
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002946:	2202      	movs	r2, #2
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002960:	601a      	str	r2, [r3, #0]
  return result;
 8002962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002966:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800296a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d102      	bne.n	8002986 <HAL_RCC_OscConfig+0xb4e>
 8002980:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	e013      	b.n	80029ae <HAL_RCC_OscConfig+0xb76>
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800298e:	2202      	movs	r2, #2
 8002990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fa93 f2a3 	rbit	r2, r3
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029b6:	2102      	movs	r1, #2
 80029b8:	6011      	str	r1, [r2, #0]
 80029ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	fa92 f1a2 	rbit	r1, r2
 80029c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029d0:	6011      	str	r1, [r2, #0]
  return result;
 80029d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	fab2 f282 	clz	r2, r2
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f002 021f 	and.w	r2, r2, #31
 80029ec:	2101      	movs	r1, #1
 80029ee:	fa01 f202 	lsl.w	r2, r1, r2
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d184      	bne.n	8002902 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a00:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 8002a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8242 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <HAL_RCC_OscConfig+0xc58>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	f000 8213 	beq.w	8002e52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	f040 8162 	bne.w	8002d02 <HAL_RCC_OscConfig+0xeca>
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	fa93 f2a3 	rbit	r2, r3
 8002a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a62:	601a      	str	r2, [r3, #0]
  return result;
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a6c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe f878 	bl	8000b78 <HAL_GetTick>
 8002a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8c:	e00c      	b.n	8002aa8 <HAL_RCC_OscConfig+0xc70>
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a94:	f7fe f870 	bl	8000b78 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e1fd      	b.n	8002ea4 <HAL_RCC_OscConfig+0x106c>
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ab0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	fa93 f2a3 	rbit	r2, r3
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002acc:	601a      	str	r2, [r3, #0]
  return result;
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ad6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d102      	bne.n	8002af2 <HAL_RCC_OscConfig+0xcba>
 8002aec:	4bb0      	ldr	r3, [pc, #704]	; (8002db0 <HAL_RCC_OscConfig+0xf78>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	e027      	b.n	8002b42 <HAL_RCC_OscConfig+0xd0a>
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	fa93 f2a3 	rbit	r2, r3
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	fa93 f2a3 	rbit	r2, r3
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	4b9c      	ldr	r3, [pc, #624]	; (8002db0 <HAL_RCC_OscConfig+0xf78>)
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b46:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b4e:	6011      	str	r1, [r2, #0]
 8002b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b54:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	fa92 f1a2 	rbit	r1, r2
 8002b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b62:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b66:	6011      	str	r1, [r2, #0]
  return result;
 8002b68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b6c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	fab2 f282 	clz	r2, r2
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f042 0220 	orr.w	r2, r2, #32
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f002 021f 	and.w	r2, r2, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f202 	lsl.w	r2, r1, r2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d182      	bne.n	8002a94 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8e:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_RCC_OscConfig+0xf78>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	497f      	ldr	r1, [pc, #508]	; (8002db0 <HAL_RCC_OscConfig+0xf78>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002bbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	fa93 f2a3 	rbit	r2, r3
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002bda:	601a      	str	r2, [r3, #0]
  return result;
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002be4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fd ffbc 	bl	8000b78 <HAL_GetTick>
 8002c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c04:	e009      	b.n	8002c1a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fd ffb7 	bl	8000b78 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e144      	b.n	8002ea4 <HAL_RCC_OscConfig+0x106c>
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c3e:	601a      	str	r2, [r3, #0]
  return result;
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_RCC_OscConfig+0xe2c>
 8002c5e:	4b54      	ldr	r3, [pc, #336]	; (8002db0 <HAL_RCC_OscConfig+0xf78>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	e027      	b.n	8002cb4 <HAL_RCC_OscConfig+0xe7c>
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c76:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	fa93 f2a3 	rbit	r2, r3
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	fa93 f2a3 	rbit	r2, r3
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	4b3f      	ldr	r3, [pc, #252]	; (8002db0 <HAL_RCC_OscConfig+0xf78>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cb8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002cbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	fa92 f1a2 	rbit	r1, r2
 8002cd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002cd8:	6011      	str	r1, [r2, #0]
  return result;
 8002cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cde:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f042 0220 	orr.w	r2, r2, #32
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f002 021f 	and.w	r2, r2, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d082      	beq.n	8002c06 <HAL_RCC_OscConfig+0xdce>
 8002d00:	e0cf      	b.n	8002ea2 <HAL_RCC_OscConfig+0x106a>
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	fa93 f2a3 	rbit	r2, r3
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d26:	601a      	str	r2, [r3, #0]
  return result;
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	461a      	mov	r2, r3
 8002d44:	2300      	movs	r3, #0
 8002d46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fd ff16 	bl	8000b78 <HAL_GetTick>
 8002d4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d50:	e009      	b.n	8002d66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7fd ff11 	bl	8000b78 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e09e      	b.n	8002ea4 <HAL_RCC_OscConfig+0x106c>
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d8a:	601a      	str	r2, [r3, #0]
  return result;
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d104      	bne.n	8002db4 <HAL_RCC_OscConfig+0xf7c>
 8002daa:	4b01      	ldr	r3, [pc, #4]	; (8002db0 <HAL_RCC_OscConfig+0xf78>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	e029      	b.n	8002e04 <HAL_RCC_OscConfig+0xfcc>
 8002db0:	40021000 	.word	0x40021000
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	fa93 f2a3 	rbit	r2, r3
 8002df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_RCC_OscConfig+0x1078>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e08:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e10:	6011      	str	r1, [r2, #0]
 8002e12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e16:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	fa92 f1a2 	rbit	r1, r2
 8002e20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e28:	6011      	str	r1, [r2, #0]
  return result;
 8002e2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	fab2 f282 	clz	r2, r2
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	f042 0220 	orr.w	r2, r2, #32
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	f002 021f 	and.w	r2, r2, #31
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d180      	bne.n	8002d52 <HAL_RCC_OscConfig+0xf1a>
 8002e50:	e027      	b.n	8002ea2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e01e      	b.n	8002ea4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_RCC_OscConfig+0x1078>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10b      	bne.n	8002e9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b09e      	sub	sp, #120	; 0x78
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e162      	b.n	8003192 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b90      	ldr	r3, [pc, #576]	; (8003110 <HAL_RCC_ClockConfig+0x25c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d910      	bls.n	8002efc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b8d      	ldr	r3, [pc, #564]	; (8003110 <HAL_RCC_ClockConfig+0x25c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 0207 	bic.w	r2, r3, #7
 8002ee2:	498b      	ldr	r1, [pc, #556]	; (8003110 <HAL_RCC_ClockConfig+0x25c>)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b89      	ldr	r3, [pc, #548]	; (8003110 <HAL_RCC_ClockConfig+0x25c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e14a      	b.n	8003192 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b82      	ldr	r3, [pc, #520]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	497f      	ldr	r1, [pc, #508]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80dc 	beq.w	80030e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d13c      	bne.n	8002faa <HAL_RCC_ClockConfig+0xf6>
 8002f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xa6>
 8002f54:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	e00f      	b.n	8002f7a <HAL_RCC_ClockConfig+0xc6>
 8002f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	667b      	str	r3, [r7, #100]	; 0x64
 8002f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f76:	4b67      	ldr	r3, [pc, #412]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f82:	fa92 f2a2 	rbit	r2, r2
 8002f86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f8a:	fab2 f282 	clz	r2, r2
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f042 0220 	orr.w	r2, r2, #32
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f002 021f 	and.w	r2, r2, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d17b      	bne.n	800309e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0f3      	b.n	8003192 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d13c      	bne.n	800302c <HAL_RCC_ClockConfig+0x178>
 8002fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x128>
 8002fd6:	4b4f      	ldr	r3, [pc, #316]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	e00f      	b.n	8002ffc <HAL_RCC_ClockConfig+0x148>
 8002fdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff8:	4b46      	ldr	r3, [pc, #280]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003000:	63ba      	str	r2, [r7, #56]	; 0x38
 8003002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003004:	fa92 f2a2 	rbit	r2, r2
 8003008:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800300a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800300c:	fab2 f282 	clz	r2, r2
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	f042 0220 	orr.w	r2, r2, #32
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f002 021f 	and.w	r2, r2, #31
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f202 	lsl.w	r2, r1, r2
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d13a      	bne.n	800309e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0b2      	b.n	8003192 <HAL_RCC_ClockConfig+0x2de>
 800302c:	2302      	movs	r3, #2
 800302e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d102      	bne.n	8003054 <HAL_RCC_ClockConfig+0x1a0>
 800304e:	4b31      	ldr	r3, [pc, #196]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	e00d      	b.n	8003070 <HAL_RCC_ClockConfig+0x1bc>
 8003054:	2302      	movs	r3, #2
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
 8003060:	2302      	movs	r3, #2
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	4b29      	ldr	r3, [pc, #164]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2202      	movs	r2, #2
 8003072:	61ba      	str	r2, [r7, #24]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	fa92 f2a2 	rbit	r2, r2
 800307a:	617a      	str	r2, [r7, #20]
  return result;
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	fab2 f282 	clz	r2, r2
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	f042 0220 	orr.w	r2, r2, #32
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f002 021f 	and.w	r2, r2, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f202 	lsl.w	r2, r1, r2
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e079      	b.n	8003192 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f023 0203 	bic.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	491a      	ldr	r1, [pc, #104]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b0:	f7fd fd62 	bl	8000b78 <HAL_GetTick>
 80030b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b8:	f7fd fd5e 	bl	8000b78 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e061      	b.n	8003192 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 020c 	and.w	r2, r3, #12
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	429a      	cmp	r2, r3
 80030de:	d1eb      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_ClockConfig+0x25c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d214      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <HAL_RCC_ClockConfig+0x25c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 0207 	bic.w	r2, r3, #7
 80030f6:	4906      	ldr	r1, [pc, #24]	; (8003110 <HAL_RCC_ClockConfig+0x25c>)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b04      	ldr	r3, [pc, #16]	; (8003110 <HAL_RCC_ClockConfig+0x25c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e040      	b.n	8003192 <HAL_RCC_ClockConfig+0x2de>
 8003110:	40022000 	.word	0x40022000
 8003114:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003124:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_RCC_ClockConfig+0x2e8>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	491a      	ldr	r1, [pc, #104]	; (800319c <HAL_RCC_ClockConfig+0x2e8>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003142:	4b16      	ldr	r3, [pc, #88]	; (800319c <HAL_RCC_ClockConfig+0x2e8>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4912      	ldr	r1, [pc, #72]	; (800319c <HAL_RCC_ClockConfig+0x2e8>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003156:	f000 f829 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 800315a:	4601      	mov	r1, r0
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <HAL_RCC_ClockConfig+0x2e8>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003164:	22f0      	movs	r2, #240	; 0xf0
 8003166:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	fa92 f2a2 	rbit	r2, r2
 800316e:	60fa      	str	r2, [r7, #12]
  return result;
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	fab2 f282 	clz	r2, r2
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	40d3      	lsrs	r3, r2
 800317a:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <HAL_RCC_ClockConfig+0x2ec>)
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	fa21 f303 	lsr.w	r3, r1, r3
 8003182:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <HAL_RCC_ClockConfig+0x2f0>)
 8003184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_RCC_ClockConfig+0x2f4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fcb0 	bl	8000af0 <HAL_InitTick>
  
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3778      	adds	r7, #120	; 0x78
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	08003c58 	.word	0x08003c58
 80031a4:	20000008 	.word	0x20000008
 80031a8:	2000000c 	.word	0x2000000c

080031ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b08b      	sub	sp, #44	; 0x2c
 80031b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031c6:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_RCC_GetSysClockFreq+0xc0>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d002      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x30>
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d003      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0x36>
 80031da:	e03c      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031dc:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031de:	623b      	str	r3, [r7, #32]
      break;
 80031e0:	e03c      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	fa92 f2a2 	rbit	r2, r2
 80031f4:	607a      	str	r2, [r7, #4]
  return result;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	fab2 f282 	clz	r2, r2
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	40d3      	lsrs	r3, r2
 8003200:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003202:	5cd3      	ldrb	r3, [r2, r3]
 8003204:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003206:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	220f      	movs	r2, #15
 8003210:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	fa92 f2a2 	rbit	r2, r2
 8003218:	60fa      	str	r2, [r7, #12]
  return result;
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	fab2 f282 	clz	r2, r2
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	40d3      	lsrs	r3, r2
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003234:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	fbb2 f2f3 	udiv	r2, r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
 8003244:	e004      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	4a0c      	ldr	r2, [pc, #48]	; (800327c <HAL_RCC_GetSysClockFreq+0xd0>)
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	623b      	str	r3, [r7, #32]
      break;
 8003254:	e002      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003258:	623b      	str	r3, [r7, #32]
      break;
 800325a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325c:	6a3b      	ldr	r3, [r7, #32]
}
 800325e:	4618      	mov	r0, r3
 8003260:	372c      	adds	r7, #44	; 0x2c
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	00f42400 	.word	0x00f42400
 8003274:	08003c68 	.word	0x08003c68
 8003278:	08003c78 	.word	0x08003c78
 800327c:	003d0900 	.word	0x003d0900
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e049      	b.n	800332a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd fb12 	bl	80008d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 faba 	bl	800383c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d001      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e04a      	b.n	80033e2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x6c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d013      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x6c>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1a      	ldr	r2, [pc, #104]	; (80033fc <HAL_TIM_Base_Start_IT+0xc8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_TIM_Base_Start_IT+0xcc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d115      	bne.n	80033cc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <HAL_TIM_Base_Start_IT+0xd0>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d015      	beq.n	80033de <HAL_TIM_Base_Start_IT+0xaa>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d011      	beq.n	80033de <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ca:	e008      	b.n	80033de <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e000      	b.n	80033e0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800
 80033fc:	40013400 	.word	0x40013400
 8003400:	40014000 	.word	0x40014000
 8003404:	00010007 	.word	0x00010007

08003408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0202 	mvn.w	r2, #2
 8003434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9d8 	bl	8003800 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f9ca 	bl	80037ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f9db 	bl	8003814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b04      	cmp	r3, #4
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0204 	mvn.w	r2, #4
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f9ae 	bl	8003800 <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f9a0 	bl	80037ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f9b1 	bl	8003814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d122      	bne.n	800350c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d11b      	bne.n	800350c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0208 	mvn.w	r2, #8
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2204      	movs	r2, #4
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f984 	bl	8003800 <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f976 	bl	80037ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f987 	bl	8003814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b10      	cmp	r3, #16
 8003518:	d122      	bne.n	8003560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b10      	cmp	r3, #16
 8003526:	d11b      	bne.n	8003560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0210 	mvn.w	r2, #16
 8003530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2208      	movs	r2, #8
 8003536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f95a 	bl	8003800 <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f94c 	bl	80037ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f95d 	bl	8003814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d10e      	bne.n	800358c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d107      	bne.n	800358c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0201 	mvn.w	r2, #1
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f926 	bl	80037d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b80      	cmp	r3, #128	; 0x80
 8003598:	d10e      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d107      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 faf6 	bl	8003ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c6:	d10e      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b80      	cmp	r3, #128	; 0x80
 80035d4:	d107      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fae9 	bl	8003bb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d10e      	bne.n	8003612 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d107      	bne.n	8003612 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800360a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f90b 	bl	8003828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b20      	cmp	r3, #32
 800361e:	d10e      	bne.n	800363e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b20      	cmp	r3, #32
 800362c:	d107      	bne.n	800363e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f06f 0220 	mvn.w	r2, #32
 8003636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 faa9 	bl	8003b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_TIM_ConfigClockSource+0x1c>
 800365e:	2302      	movs	r3, #2
 8003660:	e0b6      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x18a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003680:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003684:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800368c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369e:	d03e      	beq.n	800371e <HAL_TIM_ConfigClockSource+0xd8>
 80036a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a4:	f200 8087 	bhi.w	80037b6 <HAL_TIM_ConfigClockSource+0x170>
 80036a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ac:	f000 8086 	beq.w	80037bc <HAL_TIM_ConfigClockSource+0x176>
 80036b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b4:	d87f      	bhi.n	80037b6 <HAL_TIM_ConfigClockSource+0x170>
 80036b6:	2b70      	cmp	r3, #112	; 0x70
 80036b8:	d01a      	beq.n	80036f0 <HAL_TIM_ConfigClockSource+0xaa>
 80036ba:	2b70      	cmp	r3, #112	; 0x70
 80036bc:	d87b      	bhi.n	80037b6 <HAL_TIM_ConfigClockSource+0x170>
 80036be:	2b60      	cmp	r3, #96	; 0x60
 80036c0:	d050      	beq.n	8003764 <HAL_TIM_ConfigClockSource+0x11e>
 80036c2:	2b60      	cmp	r3, #96	; 0x60
 80036c4:	d877      	bhi.n	80037b6 <HAL_TIM_ConfigClockSource+0x170>
 80036c6:	2b50      	cmp	r3, #80	; 0x50
 80036c8:	d03c      	beq.n	8003744 <HAL_TIM_ConfigClockSource+0xfe>
 80036ca:	2b50      	cmp	r3, #80	; 0x50
 80036cc:	d873      	bhi.n	80037b6 <HAL_TIM_ConfigClockSource+0x170>
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d058      	beq.n	8003784 <HAL_TIM_ConfigClockSource+0x13e>
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d86f      	bhi.n	80037b6 <HAL_TIM_ConfigClockSource+0x170>
 80036d6:	2b30      	cmp	r3, #48	; 0x30
 80036d8:	d064      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0x15e>
 80036da:	2b30      	cmp	r3, #48	; 0x30
 80036dc:	d86b      	bhi.n	80037b6 <HAL_TIM_ConfigClockSource+0x170>
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d060      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0x15e>
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d867      	bhi.n	80037b6 <HAL_TIM_ConfigClockSource+0x170>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d05c      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0x15e>
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d05a      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0x15e>
 80036ee:	e062      	b.n	80037b6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003700:	f000 f9a6 	bl	8003a50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003712:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]
      break;
 800371c:	e04f      	b.n	80037be <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800372e:	f000 f98f 	bl	8003a50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003740:	609a      	str	r2, [r3, #8]
      break;
 8003742:	e03c      	b.n	80037be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003750:	461a      	mov	r2, r3
 8003752:	f000 f903 	bl	800395c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2150      	movs	r1, #80	; 0x50
 800375c:	4618      	mov	r0, r3
 800375e:	f000 f95c 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 8003762:	e02c      	b.n	80037be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003770:	461a      	mov	r2, r3
 8003772:	f000 f922 	bl	80039ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2160      	movs	r1, #96	; 0x60
 800377c:	4618      	mov	r0, r3
 800377e:	f000 f94c 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 8003782:	e01c      	b.n	80037be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003790:	461a      	mov	r2, r3
 8003792:	f000 f8e3 	bl	800395c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2140      	movs	r1, #64	; 0x40
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f93c 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 80037a2:	e00c      	b.n	80037be <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f000 f933 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 80037b4:	e003      	b.n	80037be <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ba:	e000      	b.n	80037be <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a3c      	ldr	r2, [pc, #240]	; (8003940 <TIM_Base_SetConfig+0x104>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00f      	beq.n	8003874 <TIM_Base_SetConfig+0x38>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d00b      	beq.n	8003874 <TIM_Base_SetConfig+0x38>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a39      	ldr	r2, [pc, #228]	; (8003944 <TIM_Base_SetConfig+0x108>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <TIM_Base_SetConfig+0x38>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a38      	ldr	r2, [pc, #224]	; (8003948 <TIM_Base_SetConfig+0x10c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_Base_SetConfig+0x38>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a37      	ldr	r2, [pc, #220]	; (800394c <TIM_Base_SetConfig+0x110>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d108      	bne.n	8003886 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2d      	ldr	r2, [pc, #180]	; (8003940 <TIM_Base_SetConfig+0x104>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01b      	beq.n	80038c6 <TIM_Base_SetConfig+0x8a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003894:	d017      	beq.n	80038c6 <TIM_Base_SetConfig+0x8a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <TIM_Base_SetConfig+0x108>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <TIM_Base_SetConfig+0x8a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a29      	ldr	r2, [pc, #164]	; (8003948 <TIM_Base_SetConfig+0x10c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <TIM_Base_SetConfig+0x8a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a28      	ldr	r2, [pc, #160]	; (800394c <TIM_Base_SetConfig+0x110>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_Base_SetConfig+0x8a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a27      	ldr	r2, [pc, #156]	; (8003950 <TIM_Base_SetConfig+0x114>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <TIM_Base_SetConfig+0x8a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a26      	ldr	r2, [pc, #152]	; (8003954 <TIM_Base_SetConfig+0x118>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_Base_SetConfig+0x8a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <TIM_Base_SetConfig+0x11c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d108      	bne.n	80038d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a10      	ldr	r2, [pc, #64]	; (8003940 <TIM_Base_SetConfig+0x104>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00f      	beq.n	8003924 <TIM_Base_SetConfig+0xe8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a11      	ldr	r2, [pc, #68]	; (800394c <TIM_Base_SetConfig+0x110>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00b      	beq.n	8003924 <TIM_Base_SetConfig+0xe8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a10      	ldr	r2, [pc, #64]	; (8003950 <TIM_Base_SetConfig+0x114>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d007      	beq.n	8003924 <TIM_Base_SetConfig+0xe8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a0f      	ldr	r2, [pc, #60]	; (8003954 <TIM_Base_SetConfig+0x118>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_Base_SetConfig+0xe8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <TIM_Base_SetConfig+0x11c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d103      	bne.n	800392c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	615a      	str	r2, [r3, #20]
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800
 800394c:	40013400 	.word	0x40013400
 8003950:	40014000 	.word	0x40014000
 8003954:	40014400 	.word	0x40014400
 8003958:	40014800 	.word	0x40014800

0800395c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f023 0201 	bic.w	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 030a 	bic.w	r3, r3, #10
 8003998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	621a      	str	r2, [r3, #32]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b087      	sub	sp, #28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f023 0210 	bic.w	r2, r3, #16
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	031b      	lsls	r3, r3, #12
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f043 0307 	orr.w	r3, r3, #7
 8003a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	021a      	lsls	r2, r3, #8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e063      	b.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2b      	ldr	r2, [pc, #172]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d108      	bne.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ae2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d018      	beq.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1a:	d013      	beq.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00e      	beq.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a12      	ldr	r2, [pc, #72]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a13      	ldr	r2, [pc, #76]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10c      	bne.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40014000 	.word	0x40014000

08003b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <memset>:
 8003bcc:	4402      	add	r2, r0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d100      	bne.n	8003bd6 <memset+0xa>
 8003bd4:	4770      	bx	lr
 8003bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bda:	e7f9      	b.n	8003bd0 <memset+0x4>

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4d0d      	ldr	r5, [pc, #52]	; (8003c14 <__libc_init_array+0x38>)
 8003be0:	4c0d      	ldr	r4, [pc, #52]	; (8003c18 <__libc_init_array+0x3c>)
 8003be2:	1b64      	subs	r4, r4, r5
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	2600      	movs	r6, #0
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	4d0b      	ldr	r5, [pc, #44]	; (8003c1c <__libc_init_array+0x40>)
 8003bee:	4c0c      	ldr	r4, [pc, #48]	; (8003c20 <__libc_init_array+0x44>)
 8003bf0:	f000 f818 	bl	8003c24 <_init>
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	2600      	movs	r6, #0
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	08003c88 	.word	0x08003c88
 8003c18:	08003c88 	.word	0x08003c88
 8003c1c:	08003c88 	.word	0x08003c88
 8003c20:	08003c8c 	.word	0x08003c8c

08003c24 <_init>:
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	bf00      	nop
 8003c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2a:	bc08      	pop	{r3}
 8003c2c:	469e      	mov	lr, r3
 8003c2e:	4770      	bx	lr

08003c30 <_fini>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	bf00      	nop
 8003c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c36:	bc08      	pop	{r3}
 8003c38:	469e      	mov	lr, r3
 8003c3a:	4770      	bx	lr
